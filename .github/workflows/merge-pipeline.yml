name: Merge Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
permissions:
  contents: read
  pull-requests: write

jobs:
  check-files:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check for disallowed files and directories
        id: check_files
        run: |
          if git diff --name-only origin/main...HEAD | grep -E 'node_modules/'; then
            echo "ðŸš¨ node_modules folder detected. Please remove it." > disallowed_files.txt
            echo "disallowed_files_present=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only origin/main...HEAD | grep -E *.txt; then
            echo "ðŸš¨ txt files detected. Please remove them." > disallowed_files.txt
            echo "disallowed_files_present=true" >> $GITHUB_OUTPUT
          fi
          if git diff --name-only origin/main...HEAD | grep -E .yarn/cache; then
            echo "ðŸš¨ .yarn/cache detected. Please remove them." > disallowed_files.txt
            echo "disallowed_files_present=true" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR on disallowed files failure
        if: steps.check_files.outputs.disallowed_files_present == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const disallowedFiles = fs.readFileSync('disallowed_files.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              body: disallowedFiles,
              repo: context.repo.repo,
              owner: context.repo.owner,
            });
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail if disallowed files are present
        if: steps.check_files.outputs.disallowed_files_present == 'true'
        run: exit 1

  code-quality:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn

      - name: Run ESLint and Prettier
        id: lint_and_prettify
        run: |
          yarn lint > eslint-output.txt || echo "eslint_failed=true" >> $GITHUB_OUTPUT
          yarn format || echo "prettify_failed=true" >> $GITHUB_OUTPUT

      - name: Comment PR on ESLint/Prettier failure
        if: steps.lint_and_prettify.outputs.eslint_failed == 'true' || steps.lint_and_prettify.outputs.prettify_failed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const eslintOutput = fs.readFileSync('eslint-output.txt', 'utf8');
            const message = `ðŸš¨ Lint/Prettier issues found:\n\n\`\`\`\n${eslintOutput}\n\`\`\`\nPlease fix the issues.`;
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              body: message,
              repo: context.repo.repo,
              owner: context.repo.owner,
            });
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail if lint or prettier failed
        if: steps.lint_and_prettify.outputs.eslint_failed == 'true' || steps.lint_and_prettify.outputs.prettify_failed == 'true'
        run: exit 1

  build-and-test:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4

      - name: Cache Yarn dependencies
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            '~/.cache/ms-playwright'
            .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: yarn && yarn dlx playwright install --with-deps

      - name: Build the project
        id: build
        run: |
          set -o pipefail
          if ! yarn build 2>&1 | tee build.log; then
            echo "build_failed=true" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Report Build Errors
        if: steps.build.outputs.build_failed == 'true'
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const buildLog = fs.readFileSync('build.log', 'utf8');
            const prNumber = context.payload.pull_request?.number;
            if (prNumber) {
              const message = `ðŸš¨ The build has failed. Please check the build logs for more information.\n\n\`\`\`\n${buildLog}\n\`\`\``;
              github.rest.issues.createComment({
                ...context.repo,
                issue_number: prNumber,
                body: message,
              });
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check For Build Errors
        if: steps.build.outputs.build_failed == 'true'
        run: exit 1

      - name: Run Tests
        id: run_tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LOG_FILE: test_output.log
        run: |
          yarn test:coverage-ci > test_output.log 2>&1 || echo "test_failed=true" >> $GITHUB_OUTPUT

      - name: Comment PR on test failure
        if: steps.run_tests.outputs.test_failed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const testLog = fs.readFileSync('test_output.log', 'utf8');
            const message = `ðŸš¨ Vitest tests failed. Check the logs:\n\n\`\`\`\n${testLog}\n\`\`\``;
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              body: message,
              repo: context.repo.repo,
              owner: context.repo.owner,
            });
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail if tests failed
        if: steps.run_tests.outputs.test_failed == 'true'
        run: exit 1
