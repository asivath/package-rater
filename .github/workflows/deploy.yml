name: Deploy to EC2

on:
  push:
    branches:
      - fix-deploy-script

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install dependencies and build
        run: |
          yarn install
          echo "VITE_API_URL=http://${{ secrets.AWS_EC2_HOST }}:3000" > app/.env
          yarn build

      - name: Archive build files
        run: |
          cd app/dist && tar -czf ../../app-dist.tar.gz . && cd -
          cd server/dist && tar -czf ../../server-dist.tar.gz . && cd -
          cd shared/dist && tar -czf ../../shared-dist.tar.gz . && cd -

      - name: Write SSH key to file
        run: |
          echo "${{ secrets.AWS_EC2_SSH_KEY }}" > /tmp/ec2_key.pem
          chmod 600 /tmp/ec2_key.pem

      - name: Copy build files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i /tmp/ec2_key.pem app-dist.tar.gz ubuntu@${{ secrets.AWS_EC2_HOST }}:/home/ubuntu/app-dist.tar.gz
          scp -o StrictHostKeyChecking=no -i /tmp/ec2_key.pem server-dist.tar.gz ubuntu@${{ secrets.AWS_EC2_HOST }}:/home/ubuntu/server-dist.tar.gz
          scp -o StrictHostKeyChecking=no -i /tmp/ec2_key.pem shared-dist.tar.gz ubuntu@${{ secrets.AWS_EC2_HOST }}:/home/ubuntu/shared-dist.tar.gz

      - name: Deploy to EC2
        run: |
          ssh -i /tmp/ec2_key.pem ubuntu@${{ secrets.AWS_EC2_HOST }} << 'EOF'
            tar -xzf app-dist.tar.gz -C package-rater/app/dist
            tar -xzf server-dist.tar.gz -C package-rater/server/dist
            tar -xzf shared-dist.tar.gz -C package-rater/shared/dist
            rm app-dist.tar.gz server-dist.tar.gz shared-dist.tar.gz

            cd package-rater
            git pull
            export NVM_DIR=~/.nvm
            source ~/.nvm/nvm.sh
            yarn workspaces focus -A --production
            
            cd server
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" > .env
            echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env
            echo "CLI_API_URL=${{ secrets.CLI_API_URL }}" >> .env
            echo "CLOUDFRONT_ORIGIN=${{ secrets.CLOUDFRONT_ORIGIN }}" >> .env
            echo "NODE_ENV=prod" >> .env

            yarn restart
          EOF

      - name: Check for CLI changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - 'cli/**'

      - name: Deploy CLI Changes to AWS Lambda
        if: steps.changes.outputs.src == 'true'
        run: |
          yarn config set nodeLinker node-modules
          yarn workspaces focus @package-rater/cli --production
          zip -r lambda.zip node_modules cli/dist cli/package.json > /dev/null
          aws lambda update-function-code --function-name package-rater-cli --zip-file fileb://lambda.zip
