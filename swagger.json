{
  "openapi": "3.0.2",
  "info": {
    "title": "ECE 461 - Fall 2024 - Project Phase 2",
    "version": "2.5.1",
    "description": "API for ECE 461/Fall 2024/Project Phase 2: A Trustworthy Module Registry\"\n\nThis spec ONLY covers endpoints that will be targetted by the autograder, and thus expect a consistant format.\n\nThis means that just the baseline requirements are covered by this spec, along with the /authenticate endpoint so that the autograder can retrieve an access token if you have chosen the access control track.\n\nFor some of the extended requirement tracks (particularly the Access Control and ML tracks), you will need to define your own endpoints for the requirements listed in Sarah's document.\n\nYou should document these endpoints you in your own copy of this file, including the expected input and output format and the possible return codes.\n\nA package ID is unique identifier for Package and Version. (Key idea -> id is unique for all pacakges).\n\nEg.\n\n    PacakgeName: Alpha, PackageVersion: 1.1.1 -> PackageID: 988645763\n\n    PacakgeName: Alpha, PackageVersion: 1.3.2 -> PackageID: 357898765",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "Prof. Davis",
      "url": "http://davisjam.github.io",
      "email": "davisjam@purdue.edu"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Staging environment"
    }
  ],
  "paths": {
    "/package": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageData"
              },
              "examples": {
                "ExampleRequestWithContent": {
                  "value": {
                    "Content": "UEsDBAoAAAAAACAfUFkAAAAAAAAAAAAAAAASAAkAdW5kZXJzY29yZS1t.........fQFQAoADBkODIwZWY3MjkyY2RlYzI4ZGQ4YjVkNTY1OTIxYjgxMDBjYTMzOTc=\n",
                    "debloat": false,
                    "Name": "cool-package"
                  }
                },
                "ExampleRequestWithURL": {
                  "value": {
                    "URL": "https://github.com/jashkenas/underscore"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Package"
                },
                "examples": {
                  "ExampleResponseWithURL": {
                    "value": {
                      "metadata": {
                        "Name": "Underscore",
                        "Version": "1.0.0",
                        "ID": "underscore"
                      },
                      "data": {
                        "Content": "UEsDBAoAAAAAACAfUFkAAAAAAAAAAAAAAAASAAkAdW5kZXJzY29yZS1t.........fQFQAoADBkODIwZWY3MjkyY2RlYzI4ZGQ4YjVkNTY1OTIxYjgxMDBjYTMzOTc=\n",
                        "URL": "https://github.com/jashkenas/underscore"
                      }
                    }
                  },
                  "ExampleResponseWithContent": {
                    "value": {
                      "metadata": {
                        "Name": "Underscore",
                        "Version": "1.0.0",
                        "ID": "underscore"
                      },
                      "data": {
                        "Content": "UEsDBAoAAAAAACAfUFkAAAAAAAAAAAAAAAASAAkAdW5kZXJzY29yZS1t.........fQFQAoADBkODIwZWY3MjkyY2RlYzI4ZGQ4YjVkNTY1OTIxYjgxMDBjYTMzOTc=\n"
                      }
                    }
                  }
                }
              }
            },
            "description": "Success. Check the ID in the returned metadata for the official ID."
          },
          "400": {
            "description": "There is missing field(s) in the PackageData or it is formed improperly (e.g. Content and URL ar both set)"
          },
          "409": {
            "description": "Package exists already."
          },
          "424": {
            "description": "Package is not uploaded due to the disqualified rating."
          }
        },
        "operationId": "PackageCreate",
        "summary": "Upload or Ingest a new package. (BASELINE)",
        "description": "Upload or Ingest a new package. Packages that are uploaded may have the same name but a new version. Refer to the description above to see how an id is formed for a pacakge."
      }
    },
    "/packages": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PackageQuery"
                }
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "offset",
            "description": "Provide this for pagination. If not provided, returns the first page of results.",
            "schema": {
              "$ref": "#/components/schemas/EnumerateOffset"
            },
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "offset": {
                "schema": {
                  "$ref": "#/components/schemas/EnumerateOffset"
                },
                "examples": {
                  "ExampleRequest": {
                    "value": "3"
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PackageMetadata"
                  }
                },
                "examples": {
                  "ExampleResponse": {
                    "value": [
                      {
                        "Version": "1.2.3",
                        "Name": "Underscore",
                        "ID": "underscore"
                      },
                      {
                        "Version": "1.2.3",
                        "Name": "Lodash",
                        "ID": "lodash"
                      },
                      {
                        "Version": "1.2.3",
                        "Name": "React",
                        "ID": "react"
                      }
                    ]
                  }
                }
              }
            },
            "description": "List of packages"
          },
          "400": {
            "description": "There is missing field(s) in the PackageQuery or it is formed improperly, or is invalid."
          },
          "413": {
            "description": "Too many packages returned."
          }
        },
        "operationId": "PackagesList",
        "summary": "Get the packages from the registry. (BASELINE)",
        "description": "Get any packages fitting the query.\nSearch for packages satisfying the indicated query.\n\nIf you want to enumerate all packages, provide an array with a single PackageQuery whose name is \"*\".\n\nIf an array with multiple queries is provided, each query will be processed with an 'OR' relationship, returning results that match any of the specified queries.\n\nThe response is paginated; the response header includes the offset to use in the next query.\n\nIn the Request Body below, \"Version\" has all the possible inputs. The \"Version\" cannot be a combinaiton of the different possibilities."
      }
    },
    "/package/{id}": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "description": "ID of package to fetch",
            "schema": {
              "$ref": "#/components/schemas/PackageID"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Package"
                },
                "examples": {
                  "ExampleResponse": {
                    "value": {
                      "metadata": {
                        "Name": "Underscore",
                        "Version": "1.0.0",
                        "ID": "underscore"
                      },
                      "data": {
                        "Content": "UEsDBAoAAAAAACAfUFkAAAAAAAAAAAAAAAASAAkAdW5kZXJzY29yZS1t.........fQFQAoADBkODIwZWY3MjkyY2RlYzI4ZGQ4YjVkNTY1OTIxYjgxMDBjYTMzOTc=\n"
                      }
                    }
                  },
                  "ExampleResponseWithURL": {
                    "value": {
                      "metadata": {
                        "Name": "Underscore",
                        "Version": "1.0.0",
                        "ID": "underscore"
                      },
                      "data": {
                        "Content": "UEsDBAoAAAAAACAfUFkAAAAAAAAAAAAAAAASAAkAdW5kZXJzY29yZS1t.........fQFQAoADBkODIwZWY3MjkyY2RlYzI4ZGQ4YjVkNTY1OTIxYjgxMDBjYTMzOTc=\n",
                        "URL": "https://github.com/jashkenas/underscore"
                      }
                    }
                  }
                }
              }
            },
            "description": "Return the package. Content is required."
          },
          "400": {
            "description": "There is missing field(s) in the PackageID or it is formed improperly, or is invalid."
          },
          "404": {
            "description": "Package does not exist."
          }
        },
        "operationId": "PackageRetrieve",
        "summary": "Interact with the package with this ID. (BASELINE)",
        "description": "Return this package."
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Package"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "id",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/PackageID"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Version is updated."
          },
          "400": {
            "description": "There is missing field(s) in the PackageID or it is formed improperly, or is invalid."
          },
          "404": {
            "description": "Package does not exist."
          }
        },
        "operationId": "PackageUpdate",
        "summary": "Update this content of the package. (BASELINE)",
        "description": "This endpoint is used to create a new version for an existing package.\n\nYou will receive the package contents similarly to the /package endpoint, along with a new version ID. First, check if the new version ID is more recent than the latest version. Note that the provided package ID may refer to an older version of the package; in this case, you should append the new package version after the latest version."
      },
      "parameters": [
        {
          "examples": {
            "ExampleID": {
              "value": "underscore"
            }
          },
          "name": "id",
          "description": "Package ID",
          "schema": {
            "$ref": "#/components/schemas/PackageID"
          },
          "in": "path",
          "required": true
        }
      ]
    },
    "/package/{id}/rate": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageRating"
                }
              }
            },
            "description": "Return the rating. Only use this if each metric was computed successfully."
          },
          "400": {
            "description": "There is missing field(s) in the PackageID"
          },
          "404": {
            "description": "Package does not exist."
          },
          "500": {
            "description": "The package rating system choked on at least one of the metrics."
          }
        },
        "operationId": "PackageRate",
        "summary": "Get ratings for this package. (BASELINE)"
      },
      "parameters": [
        {
          "name": "id",
          "schema": {
            "$ref": "#/components/schemas/PackageID"
          },
          "in": "path",
          "required": true
        }
      ]
    },
    "/package/{id}/cost": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageCost"
                },
                "examples": {
                  "ExampleWithoutDependency": {
                    "value": "{\n  \"357898765\": {\n    \"totalCost\": 50.0\n  }\n}\n"
                  },
                  "ExampleWithDependency": {
                    "value": "{\n  \"357898765\": {\n    \"standaloneCost\": 50.0,\n    \"totalCost\": 95.0\n  },\n  \"988645763\": {\n    \"standaloneCost\": 20.0,\n    \"totalCost\": 45.0\n  }\n}\n"
                  }
                }
              }
            },
            "description": "Return the total cost of package, and it's dependencies"
          },
          "400": {
            "description": "There is missing field(s) in the PackageID"
          },
          "404": {
            "description": "Package does not exist."
          },
          "500": {
            "description": "The package rating system choked on at least one of the metrics."
          }
        },
        "summary": "Get the cost of a package (BASELINE)"
      },
      "parameters": [
        {
          "name": "id",
          "schema": {
            "$ref": "#/components/schemas/PackageID"
          },
          "in": "path",
          "required": true
        },
        {
          "name": "dependency",
          "schema": {
            "type": "boolean",
            "default": false
          },
          "in": "query",
          "required": true
        }
      ]
    },
    "/package/byRegEx": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageRegEx"
              },
              "examples": {
                "ExampleRegEx": {
                  "value": {
                    "RegEx": "is-even"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PackageMetadata"
                  }
                },
                "examples": {
                  "ExampleResponse": {
                    "value": [
                      {
                        "Version": "1.2.3",
                        "Name": "Underscore",
                        "ID": "underscore"
                      },
                      {
                        "Version": "2.1.0",
                        "Name": "Lodash",
                        "ID": "lodash"
                      },
                      {
                        "Version": "1.2.0",
                        "Name": "React",
                        "ID": "react"
                      }
                    ]
                  }
                }
              }
            },
            "description": "Return a list of packages."
          },
          "400": {
            "description": "There is missing field(s) in the PackageRegEx or it is formed improperly, or is invalid"
          },
          "404": {
            "description": "No package found under this regex."
          }
        },
        "operationId": "PackageByRegExGet",
        "summary": "Get any packages fitting the regular expression (BASELINE).",
        "description": "Search for a package using regular expression over package names and READMEs. This is similar to search by name."
      }
    },
    "/tracks": {
      "get": {
        "summary": "Get the list of tracks a student has planned to implement in their code",
        "responses": {
          "200": {
            "description": "Return the list of tracks the student plans to implement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plannedTracks": {
                      "type": "array",
                      "description": "List of tracks the student plans to implement",
                      "items": {
                        "type": "string",
                        "enum": ["Performance track", "Access control track", "High assurance track", "ML inside track"]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "The system encountered an error while retrieving the student's track information."
          }
        }
      }
    },
    "/reset": {
      "delete": {
        "responses": {
          "200": {
            "description": "Registry is reset."
          }
        },
        "operationId": "RegistryReset",
        "summary": "Reset the registry. (BASELINE)",
        "description": "Reset the registry to a system default state."
      }
    }
  },
  "components": {
    "schemas": {
      "Package": {
        "required": ["metadata", "data"],
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PackageMetadata"
          },
          "data": {
            "$ref": "#/components/schemas/PackageData"
          }
        }
      },
      "PackageMetadata": {
        "description": "The \"Name\" and \"Version\" are used as a unique identifier pair when uploading a package.\n\nThe \"ID\" is used as an internal identifier for interacting with existing packages.",
        "required": ["Name", "Version", "ID"],
        "type": "object",
        "properties": {
          "Name": {
            "$ref": "#/components/schemas/PackageName"
          },
          "Version": {
            "description": "Package version",
            "type": "string",
            "example": "1.2.3"
          },
          "ID": {
            "$ref": "#/components/schemas/PackageID"
          }
        }
      },
      "PackageData": {
        "description": "This is a \"union\" type.\n- On package upload, either Content or URL should be set. If both are set, returns 400.\n- On package update, exactly one field should be set.\n- On download, the Content field should be set.",
        "type": "object",
        "properties": {
          "Name": {
            "description": "Name of a program provided with the Content."
          },
          "Content": {
            "description": "Package contents. This is the zip file uploaded by the user. (Encoded as text using a Base64 encoding).\n\nThis will be a zipped version of an npm package's GitHub repository, minus the \".git/\" directory.\" It will, for example, include the \"package.json\" file that can be used to retrieve the project homepage.\n\nThis string will usually be massive, and we use an abbreviated version of the string for the examples in this spec. To see a full-sized example of a base64 encoded repo, check the example posted on Brightspace under Project -> Phase 2 -> Specification\n\nSee https://docs.npmjs.com/cli/v7/configuring-npm/package-json#homepage.",
            "type": "string"
          },
          "URL": {
            "description": "Package URL (for use in public ingest).\n\nNote: If the NPM url points to a specific version, you should use that version's content.\n",
            "type": "string"
          },
          "debloat": {
            "description": "If true, remove uneccessary bloat from the package. You may wish to read about tree shaking, minification, etc",
            "type": "boolean"
          }
        }
      },
      "PackageID": {
        "description": "Unique ID for use with the /package/{id} endpoint.",
        "example": "7536041697512265",
        "type": "string",
        "pattern": "^[a-zA-Z0-9\\-]+$"
      },
      "PackageCost": {
        "description": "Package Cost is the collection of total cost of package given in terms of total Megabytes (mb) that needs to be downloaded. It consists of a map with key of the map as the package ID and it's value consists of total cost as describe below.",
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "standaloneCost": {
              "type": "number",
              "description": "The stand alone cost of this package excluding dependencies. This field is only required in case `dependency = true`, in the request."
            },
            "totalCost": {
              "type": "number",
              "description": "The total cost of the package. When `dependency` is not set, this should return the standalone cost,\nand when it is set, this field should return the sum of the costs of all the dependencies.\n\nFor example:\n\n  Package 1 -> Package 2 -> Package 3, Package 4.\n\n    If dependency = false\n      totalCost = (Package 1).size()\n    If dependency = true\n    totalCost = (Package 1 + Package 2 + Package 3 + Package 4).size()\n"
            }
          },
          "required": ["totalCost"]
        }
      },
      "PackageRating": {
        "description": "Package rating (cf. Project 1).\n\nIf the Project 1 that you inherited does not support one or more of the original properties, denote this with the value \"-1\".",
        "required": [
          "RampUp",
          "Correctness",
          "BusFactor",
          "ResponsiveMaintainer",
          "LicenseScore",
          "GoodPinningPractice",
          "PullRequest",
          "NetScore",
          "RampUpLatency",
          "CorrectnessLatency",
          "BusFactorLatency",
          "ResponsiveMaintainerLatency",
          "LicenseScoreLatency",
          "GoodPinningPracticeLatency",
          "PullRequestLatency",
          "NetScoreLatency"
        ],
        "type": "object",
        "properties": {
          "BusFactor": {
            "format": "double",
            "description": "",
            "type": "number"
          },
          "BusFactorLatency": {
            "format": "double",
            "description": "",
            "type": "number"
          },
          "Correctness": {
            "format": "double",
            "description": "",
            "type": "number"
          },
          "CorrectnessLatency": {
            "format": "double",
            "description": "",
            "type": "number"
          },
          "RampUp": {
            "format": "double",
            "description": "",
            "type": "number"
          },
          "RampUpLatency": {
            "format": "double",
            "description": "",
            "type": "number"
          },
          "ResponsiveMaintainer": {
            "format": "double",
            "description": "",
            "type": "number"
          },
          "ResponsiveMaintainerLatency": {
            "format": "double",
            "description": "",
            "type": "number"
          },
          "LicenseScore": {
            "format": "double",
            "description": "",
            "type": "number"
          },
          "LicenseScoreLatency": {
            "format": "double",
            "description": "",
            "type": "number"
          },
          "GoodPinningPractice": {
            "format": "double",
            "description": "The fraction of its dependencies that are pinned to at least a specific major+minor version, e.g. version 2.3.X of a package. (If there are zero dependencies, they should receive a 1.0 rating. If there are two dependencies, one pinned to this degree, then they should receive a Â½ = 0.5 rating).",
            "type": "number"
          },
          "GoodPinningPracticeLatency": {
            "format": "double",
            "description": "",
            "type": "number"
          },
          "PullRequest": {
            "format": "double",
            "description": "The fraction of project code that was introduced through pull requests with a code review.",
            "type": "number"
          },
          "PullRequestLatency": {
            "format": "double",
            "description": "The fraction of project code that was introduced through pull requests with a code review.",
            "type": "number"
          },
          "NetScore": {
            "format": "double",
            "description": "Scores calculated from other seven metrics.",
            "type": "number"
          },
          "NetScoreLatency": {
            "format": "double",
            "description": "Scores calculated from other seven metrics.",
            "type": "number"
          }
        }
      },
      "PackageName": {
        "description": "Name of a package.\n\n- Names should only use typical \"keyboard\" characters.\n- The name \"*\" is reserved. See the `/packages` API for its meaning.",
        "type": "string"
      },
      "SemverRange": {
        "description": "",
        "type": "string",
        "example": "1.2.3"
      },
      "PackageQuery": {
        "description": "",
        "required": ["Name"],
        "type": "object",
        "properties": {
          "Version": {
            "$ref": "#/components/schemas/SemverRange",
            "description": ""
          },
          "Name": {
            "$ref": "#/components/schemas/PackageName",
            "description": ""
          }
        }
      },
      "EnumerateOffset": {
        "description": "Offset in pagination.",
        "type": "string",
        "example": "1"
      },
      "PackageRegEx": {
        "description": "",
        "required": ["RegEx"],
        "type": "object",
        "properties": {
          "RegEx": {
            "description": "A regular expression over package names and READMEs that is used for searching for a package",
            "type": "string"
          }
        }
      }
    }
  }
}
